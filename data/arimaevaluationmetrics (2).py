# -*- coding: utf-8 -*-
"""ARIMAEvaluationMetrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/114olvfxwdMJKaGa24VHvyGeb_mD1H9Wj
"""

import pandas as pd
import numpy as np
import warnings
from statsmodels.tsa.arima.model import ARIMA
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

warnings.filterwarnings("ignore")

datasets = {
    "diversity_movies": ("/content/Lemmetization_labeled_diversity_movies_filtered.csv", "Representation_Percentage"),
    "media_representation": ("Lemmetization_labeled_media_representation.csv", "Positive Representation (%)"),
    "social_media_representation": ("Lemmetization_labeled_social_media_representation.csv", "Positive Representation (%)")
}

all_results = []

for dataset_name, (file_path, target_col) in datasets.items():
    print(f"üîç Evaluating ARIMA for Dataset: {dataset_name.replace('_', ' ').title()}")

    df = pd.read_csv(file_path)
    df.columns = df.columns.str.strip()
    print(f"üß© Columns found: {df.columns.tolist()}")

    possible_community_cols = ["Community", "community", "Community Represented", "Group"]
    community_col = next((col for col in df.columns if col in possible_community_cols), None)

    if not community_col:
        print(f"‚ùå No valid community column found in {dataset_name}")
        continue

    df.rename(columns=lambda x: x.strip().title(), inplace=True)
    df.rename(columns={community_col: "Community"}, inplace=True)

    if "Year" not in df.columns and "year" in df.columns:
        df.rename(columns={"year": "Year"}, inplace=True)

    df["Year"] = pd.to_numeric(df["Year"], errors="coerce")
    df[target_col] = pd.to_numeric(df[target_col], errors="coerce")
    df.dropna(subset=["Year", "Community", target_col], inplace=True)
    df["Year"] = df["Year"].astype(int)

    for community in df["Community"].unique():
        group = df[df["Community"] == community].sort_values("Year")
        if group["Year"].nunique() < 6:
            continue

        series = group.groupby("Year")[target_col].mean()

        try:
            train_size = int(len(series) * 0.8)
            train, test = series[:train_size], series[train_size:]

            model = ARIMA(train, order=(1, 1, 1))
            model_fit = model.fit()
            forecast = model_fit.forecast(steps=len(test))

            mae = mean_absolute_error(test, forecast)
            mse = mean_squared_error(test, forecast)
            rmse = np.sqrt(mse)
            r2 = r2_score(test, forecast)
            mape = np.mean(np.abs((test - forecast) / test)) * 100

            all_results.append({
                "Model": "ARIMA",
                "Dataset": dataset_name,
                "Community": community,
                "MAE": mae,
                "MSE": mse,
                "RMSE": rmse,
                "R2": r2,
                "MAPE (%)": mape
            })

        except Exception as e:
            continue

results_df = pd.DataFrame(all_results)
results_df.to_csv("arima_evaluation_metrics.csv", index=False)
print("‚úÖ ARIMA results saved to 'arima_evaluation_metrics.csv'")