# -*- coding: utf-8 -*-
"""LSTMEvaluationmetrics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Nx2vxB8whkNzBPxe8ov6RouYea43L_aJ
"""

import pandas as pd
import numpy as np
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.preprocessing import MinMaxScaler
import warnings

warnings.filterwarnings("ignore")

# Dataset files and targets
datasets = {
    "diversity_movies": ("/content/Lemmetization_labeled_diversity_movies_filtered.csv", "Representation_Percentage"),
    "media_representation": ("Lemmetization_labeled_media_representation.csv", "Positive Representation (%)"),
    "social_media_representation": ("Lemmetization_labeled_social_media_representation.csv", "Positive Representation (%)")
}

results = []

def create_sequences(data, seq_length=3):
    X, y = [], []
    for i in range(len(data) - seq_length):
        X.append(data[i:i + seq_length])
        y.append(data[i + seq_length])
    return np.array(X), np.array(y)

for dataset_name, (file_path, target_col) in datasets.items():
    print(f"üîç Evaluating LSTM for Dataset: {dataset_name.replace('_', ' ').title()}")

    df = pd.read_csv(file_path)
    df.columns = df.columns.str.strip()
    print(f"üß© Columns found: {df.columns.tolist()}")

    possible_community_cols = ["Community", "community", "Community Represented", "Group"]
    community_col = next((col for col in df.columns if col in possible_community_cols), None)

    if not community_col:
        print(f"‚ùå No valid community column found in {dataset_name}")
        continue

    df.rename(columns=lambda x: x.strip().title(), inplace=True)
    df.rename(columns={community_col: "Community"}, inplace=True)

    if "Year" not in df.columns and "year" in df.columns:
        df.rename(columns={"year": "Year"}, inplace=True)

    df["Year"] = pd.to_numeric(df["Year"], errors="coerce")
    df[target_col] = pd.to_numeric(df[target_col], errors="coerce")
    df.dropna(subset=["Year", "Community", target_col], inplace=True)
    df["Year"] = df["Year"].astype(int)

    for community in df["Community"].unique():
        group = df[df["Community"] == community].sort_values("Year")
        if group["Year"].nunique() < 6:
            continue

        series = group.groupby("Year")[target_col].mean()
        scaler = MinMaxScaler()
        scaled_series = scaler.fit_transform(series.values.reshape(-1, 1))

        X, y = create_sequences(scaled_series)
        if len(X) == 0:
            continue

        X = X.reshape((X.shape[0], X.shape[1], 1))
        train_size = int(len(X) * 0.8)
        X_train, y_train = X[:train_size], y[:train_size]
        X_test, y_test = X[train_size:], y[train_size:]

        model = Sequential([
            LSTM(64, return_sequences=True, input_shape=(X.shape[1], 1)),
            Dropout(0.2),
            LSTM(32),
            Dropout(0.2),
            Dense(1)
        ])
        model.compile(optimizer="adam", loss="mean_squared_error")
        model.fit(X_train, y_train, epochs=100, batch_size=2, verbose=0)

        y_pred = model.predict(X_test)
        y_test_rescaled = scaler.inverse_transform(y_test.reshape(-1, 1)).flatten()
        y_pred_rescaled = scaler.inverse_transform(y_pred).flatten()

        mae = mean_absolute_error(y_test_rescaled, y_pred_rescaled)
        mse = mean_squared_error(y_test_rescaled, y_pred_rescaled)
        rmse = np.sqrt(mse)
        r2 = r2_score(y_test_rescaled, y_pred_rescaled)
        mape = np.mean(np.abs((y_test_rescaled - y_pred_rescaled) / y_test_rescaled)) * 100

        results.append({
            "Model": "LSTM",
            "Dataset": dataset_name,
            "Community": community,
            "MAE": mae,
            "MSE": mse,
            "RMSE": rmse,
            "R2": r2,
            "MAPE (%)": mape
        })

results_df = pd.DataFrame(results)
results_df.to_csv("lstm_evaluation_metrics.csv", index=False)
print("‚úÖ LSTM results saved to 'lstm_evaluation_metrics.csv'")